<?php

namespace App\Command;

use Symfony\Component\Console\Attribute\AsCommand;
use Symfony\Component\Console\Command\Command;
use Symfony\Component\Console\Input\InputInterface;
use Symfony\Component\Console\Output\OutputInterface;
use Symfony\Component\Console\Style\SymfonyStyle;
use Doctrine\DBAL\Connection;

#[AsCommand(
    name: 'app:diagnose-data-loss',
    description: 'üîç Diagnostique les pertes de donn√©es dans la base de donn√©es',
)]
class DiagnoseDataLossCommand extends Command
{
    private Connection $connection;

    public function __construct(Connection $connection)
    {
        parent::__construct();
        $this->connection = $connection;
    }

    protected function execute(InputInterface $input, OutputInterface $output): int
    {
        $io = new SymfonyStyle($input, $output);

        $io->title('üîç DIAGNOSTIC DES PERTES DE DONN√âES');
        $io->section('Analyse de la base de donn√©es');

        // 1. Statistiques g√©n√©rales
        $totalGames = $this->connection->fetchOne('SELECT COUNT(*) FROM game');
        $gamesWithRating = $this->connection->fetchOne('SELECT COUNT(*) FROM game WHERE total_rating IS NOT NULL');
        $gamesWithVotes = $this->connection->fetchOne('SELECT COUNT(*) FROM game WHERE total_rating_count IS NOT NULL');
        $gamesWithBoth = $this->connection->fetchOne('SELECT COUNT(*) FROM game WHERE total_rating IS NOT NULL AND total_rating_count IS NOT NULL');

        $io->table(
            ['M√©trique', 'Valeur'],
            [
                ['Total jeux', $totalGames],
                ['Avec rating', $gamesWithRating],
                ['Avec votes', $gamesWithVotes],
                ['Avec rating ET votes', $gamesWithBoth],
                ['Jeux sans donn√©es', $totalGames - $gamesWithBoth],
                ['% de perte', round((($totalGames - $gamesWithBoth) / $totalGames) * 100, 2) . '%']
            ]
        );

        // 2. Jeux r√©cents sans donn√©es (365 derniers jours)
        $recentGamesWithoutData = $this->connection->fetchAllAssociative(
            'SELECT title, total_rating, total_rating_count, release_date 
             FROM game 
             WHERE (total_rating IS NULL OR total_rating_count IS NULL) 
             AND release_date >= DATE_SUB(NOW(), INTERVAL 365 DAY)
             ORDER BY release_date DESC
             LIMIT 10'
        );

        if (!empty($recentGamesWithoutData)) {
            $io->section('üéÆ Jeux r√©cents sans donn√©es (365 derniers jours)');
            $io->table(
                ['Titre', 'Rating', 'Votes', 'Date de sortie'],
                array_map(fn($game) => [
                    $game['title'],
                    $game['total_rating'] ?? 'NULL',
                    $game['total_rating_count'] ?? 'NULL',
                    $game['release_date'] ?? 'NULL'
                ], $recentGamesWithoutData)
            );
        }

        // 3. Jeux populaires sans donn√©es
        $popularGamesWithoutData = $this->connection->fetchAllAssociative(
            'SELECT title, total_rating, total_rating_count, follows 
             FROM game 
             WHERE (total_rating IS NULL OR total_rating_count IS NULL) 
             AND follows > 1000
             ORDER BY follows DESC
             LIMIT 10'
        );

        if (!empty($popularGamesWithoutData)) {
            $io->section('üî• Jeux populaires sans donn√©es (follows > 1000)');
            $io->table(
                ['Titre', 'Rating', 'Votes', 'Follows'],
                array_map(fn($game) => [
                    $game['title'],
                    $game['total_rating'] ?? 'NULL',
                    $game['total_rating_count'] ?? 'NULL',
                    $game['follows'] ?? 'NULL'
                ], $popularGamesWithoutData)
            );
        }

        // 4. Jeux sp√©cifiques mentionn√©s
        $specificGames = $this->connection->fetchAllAssociative(
            'SELECT title, total_rating, total_rating_count, category, release_date 
             FROM game 
             WHERE title LIKE "%Split Fiction%" 
             OR title LIKE "%Indiana Jones%" 
             OR title LIKE "%Astro Bot%"
             ORDER BY total_rating DESC'
        );

        if (!empty($specificGames)) {
            $io->section('üéØ Jeux sp√©cifiques');
            $io->table(
                ['Titre', 'Rating', 'Votes', 'Cat√©gorie', 'Date de sortie'],
                array_map(fn($game) => [
                    $game['title'],
                    $game['total_rating'] ?? 'NULL',
                    $game['total_rating_count'] ?? 'NULL',
                    $game['category'] ?? 'NULL',
                    $game['release_date'] ?? 'NULL'
                ], $specificGames)
            );
        }

        // 5. Recommandations
        $io->section('üí° Recommandations');

        if ($totalGames - $gamesWithBoth > 0) {
            $io->warning([
                'Des donn√©es sont manquantes !',
                'Ex√©cutez : php bin/console app:fix-missing-data'
            ]);
        }

        if ($gamesWithBoth < 50) {
            $io->error([
                'CRITIQUE : Tr√®s peu de jeux ont des donn√©es compl√®tes !',
                'V√©rifiez les commandes de nettoyage qui suppriment des donn√©es'
            ]);
        }

        $io->success('Diagnostic termin√© !');

        return Command::SUCCESS;
    }
} 