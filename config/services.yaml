# config/services.yaml

# This file is the entry point to configure your own services.
# Files in the packages/ subdirectory configure your dependencies.

# Put parameters here that don't need to change on each machine where the app is deployed
# https://symfony.com/doc/current/best_practices.html#use-parameters-for-application-configuration
parameters:
    igdb.client_id: '%env(IGDB_CLIENT_ID)%'
    igdb.client_secret: '%env(IGDB_CLIENT_SECRET)%'

services:
    # default configuration for services in *this* file
    _defaults:
        autowire: true      # Automatically injects dependencies in your services.
        autoconfigure: true # Automatically registers your services as commands, event subscribers, etc.

    # makes classes in src/ available to be used as services
    # this creates a service per class whose id is the fully-qualified class name
    App\:
        resource: '../src/'
        exclude:
            - '../src/DependencyInjection/'
            - '../src/Entity/'
            - '../src/Kernel.php'

    # Configuration explicite pour le client IGDB
    App\Service\IgdbClient:
        arguments:
            $clientId: '%igdb.client_id%'
            $clientSecret: '%igdb.client_secret%'

    # Une seule configuration du LoginController
    App\Controller\LoginController: ~

    # Configuration pour le LoginRateLimiter avec RateLimiterFactory
    App\Security\LoginRateLimiter:
        arguments:
            $factory: '@limiter.login_limiter'

    # Configuration du CustomAuthenticationFailureHandler
    App\Security\CustomAuthenticationFailureHandler:
        autowire: true
        autoconfigure: true

    # Configuration du AuthenticationSuccessListener pour JWT
    App\EventListener\AuthenticationSuccessListener:
        tags:
            - { name: kernel.event_listener, event: lexik_jwt_authentication.on_authentication_success, method: onAuthenticationSuccessResponse }

    # Configuration du gestionnaire de succ√®s d'authentification JWT
    lexik_jwt_authentication.handler.authentication_success:
        class: Lexik\Bundle\JWTAuthenticationBundle\Security\Http\Authentication\AuthenticationSuccessHandler
        arguments:
            - '@lexik_jwt_authentication.jwt_manager'
            - '@event_dispatcher'
            - '@lexik_jwt_authentication.extractor.chain_extractor'
            - false
        tags:
            - { name: 'kernel.event_listener', event: 'lexik_jwt_authentication.on_authentication_success', method: 'onAuthenticationSuccessResponse' }

    App\Security\AuthenticationSuccessHandler:
        arguments:
            - '@lexik_jwt_authentication.jwt_manager'
            - '@event_dispatcher'
        tags:
            - { name: 'kernel.event_listener', event: 'lexik_jwt_authentication.on_authentication_success', method: 'onAuthenticationSuccess' }

    # Configuration du filtre custom JsonSearchFilter
    App\Filter\JsonSearchFilter:
        tags: ['api_platform.filter']
